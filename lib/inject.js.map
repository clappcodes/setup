{
  "version": 3,
  "sources": ["../src/inject.ts"],
  "sourcesContent": ["import {\n\trenameSync,\n\texistsSync,\n\treadFileSync,\n\twriteFileSync,\n\trmSync,\n} from \"node:fs\";\nimport { exec } from \"node:child_process\";\nimport path from \"node:path\";\n\n/**\n * Unpack app.asar & inject module script tag in index.html\n * @param appPath Application path (ex: /Applications/Crawless.app)\n * @param libFile Relative js file path (ex: app.dev/lib/ext.js)\n * @returns {string} `/Applications/Crawless.app/Contents/Resources/app.dev/lib/ext.js`\n */\nexport default function inject(appPath: string, libFile: string) {\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst resPath = path.resolve(appPath, \"Contents/Resources/\");\n\n\t\tconst index_html_file = path.resolve(\n\t\t\tresPath,\n\t\t\t\"app.asar/\",\n\t\t\t\"dist/ui/index.html\"\n\t\t);\n\t\tconst script_src = path.join(resPath, libFile);\n\t\tconst script_type = \"module\";\n\n\t\tif (!existsSync(resPath)) {\n\t\t\treject(\"This directory doesn't exist.\");\n\t\t\t// process.exit(0);\n\t\t}\n\n\t\tif (!existsSync(_path(\"app.asar\"))) {\n\t\t\treject('This directory doesn\\'t contain \"app.asar\".');\n\t\t\t// process.exit(0);\n\t\t}\n\n\t\t// Create a backup of the app.asar file if one doesn't already exist.\n\t\tif (!existsSync(_path(\"app.asar.bak\"))) {\n\t\t\tconsole.log(\"Creating a backup of app.asar because none exists.\");\n\t\t\trenameSync(_path(\"app.asar\"), _path(\"app.asar.bak\"));\n\t\t\t// createReadStream(_path('app.asar')).pipe(createWriteStream(_path('app.asar.bak')));\n\t\t}\n\n\t\tif (existsSync(_path(\"app.asar\"))) {\n\t\t\tconsole.log(\"app.asar already exists. Removing it.\");\n\t\t\tif (existsSync(_path(\"app.asar.old\"))) {\n\t\t\t\trmSync(_path(\"app.asar.old\"), { recursive: true, force: true });\n\t\t\t}\n\t\t\trenameSync(_path(\"app.asar\"), _path(\"app.asar.old\"));\n\t\t}\n\n\t\t// Extract the asar file.\n\t\texec(`asar extract ${_path(\"app.asar.bak\")} ${_path(\"app.asar\")}`, () => {\n\t\t\tlet filePath = index_html_file;\n\t\t\tlet contents = readFileSync(filePath, \"utf8\");\n\n\t\t\tconsole.log(`Processing ${index_html_file}...`);\n\t\t\tcontents = contents.replace(\n\t\t\t\t/<title>Crawless<\\/title>/,\n\t\t\t\t`<title>Crawless (dev)<\\/title>\\n<script type=\"${script_type}\" src=\"${script_src}\"></script>`\n\t\t\t);\n\t\t\t// contents = contents.replace(/script-src/, \"script-src blob: 'unsafe-eval'\")\n\t\t\twriteFileSync(filePath, contents);\n\n\t\t\trmSync(_path(\"app.asar.old\"), { recursive: true, force: true });\n\n\t\t\tconsole.log(\"Done\", script_src);\n\n\t\t\tresolve(script_src);\n\t\t});\n\t\tfunction _path(to) {\n\t\t\treturn resPath.replace(/\\/+$/, \"\") + \"/\" + to.replace(/^\\/+/, \"\");\n\t\t}\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMO;AACP,gCAAqB;AACrB,uBAAiB;AAQF,SAAR,OAAwB,SAAiB,SAAiB;AAChE,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC/C,UAAM,UAAU,iBAAAA,QAAK,QAAQ,SAAS,qBAAqB;AAE3D,UAAM,kBAAkB,iBAAAA,QAAK;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,aAAa,iBAAAA,QAAK,KAAK,SAAS,OAAO;AAC7C,UAAM,cAAc;AAEpB,QAAI,KAAC,2BAAW,OAAO,GAAG;AACzB,aAAO,+BAA+B;AAAA,IAEvC;AAEA,QAAI,KAAC,2BAAW,MAAM,UAAU,CAAC,GAAG;AACnC,aAAO,4CAA6C;AAAA,IAErD;AAGA,QAAI,KAAC,2BAAW,MAAM,cAAc,CAAC,GAAG;AACvC,cAAQ,IAAI,oDAAoD;AAChE,qCAAW,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC;AAAA,IAEpD;AAEA,YAAI,2BAAW,MAAM,UAAU,CAAC,GAAG;AAClC,cAAQ,IAAI,uCAAuC;AACnD,cAAI,2BAAW,MAAM,cAAc,CAAC,GAAG;AACtC,mCAAO,MAAM,cAAc,GAAG,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAAA,MAC/D;AACA,qCAAW,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC;AAAA,IACpD;AAGA,wCAAK,gBAAgB,MAAM,cAAc,CAAC,IAAI,MAAM,UAAU,CAAC,IAAI,MAAM;AACxE,UAAI,WAAW;AACf,UAAI,eAAW,6BAAa,UAAU,MAAM;AAE5C,cAAQ,IAAI,cAAc,eAAe,KAAK;AAC9C,iBAAW,SAAS;AAAA,QACnB;AAAA,QACA;AAAA,gBAAiD,WAAW,UAAU,UAAU;AAAA,MACjF;AAEA,wCAAc,UAAU,QAAQ;AAEhC,iCAAO,MAAM,cAAc,GAAG,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAE9D,cAAQ,IAAI,QAAQ,UAAU;AAE9B,cAAQ,UAAU;AAAA,IACnB,CAAC;AACD,aAAS,MAAM,IAAI;AAClB,aAAO,QAAQ,QAAQ,QAAQ,EAAE,IAAI,MAAM,GAAG,QAAQ,QAAQ,EAAE;AAAA,IACjE;AAAA,EACD,CAAC;AACF;",
  "names": ["path"]
}
