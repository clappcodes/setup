{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import {\n\trenameSync,\n\texistsSync,\n\tcreateReadStream,\n\tcreateWriteStream,\n\treadFileSync,\n\twriteFileSync,\n\tunlinkSync,\n\trmdirSync,\n\trmSync,\n} from \"node:fs\";\nimport { exec } from \"node:child_process\";\nimport path from \"node:path\";\n\nlet index_html_file = \"dist/ui/index.html\";\nlet cx_js_file = \"../../../app.dev/lib/ext.js\";\n\nconsole.log(module.paths);\n\nmodule.exports = function run(appPath) {\n\tconst appDir = path.resolve(appPath, \"Contents/Resources\");\n\n\tif (!existsSync(appDir)) {\n\t\tconsole.log(\"This directory doesn't exist.\");\n\t\tprocess.exit(0);\n\t}\n\n\tif (!existsSync(_path(\"app.asar\"))) {\n\t\tconsole.log('This directory doesn\\'t contain \"app.asar\".');\n\t\tprocess.exit(0);\n\t}\n\n\t// Create a backup of the app.asar file if one doesn't already exist.\n\tif (!existsSync(_path(\"app.asar.bak\"))) {\n\t\tconsole.log(\"Creating a backup of app.asar because none exists.\");\n\t\trenameSync(_path(\"app.asar\"), _path(\"app.asar.bak\"));\n\t\t// createReadStream(_path('app.asar')).pipe(createWriteStream(_path('app.asar.bak')));\n\t}\n\n\tif (existsSync(_path(\"app.asar\"))) {\n\t\tconsole.log(\"app.asar already exists. Removing it.\");\n\t\tif (existsSync(_path(\"app.asar.old\"))) {\n\t\t\trmSync(_path(\"app.asar.old\"), { recursive: true, force: true });\n\t\t}\n\t\trenameSync(_path(\"app.asar\"), _path(\"app.asar.old\"));\n\t}\n\n\t// Extract the asar file.\n\texec(`asar extract ${_path(\"app.asar.bak\")} ${_path(\"app.asar\")}`, () => {\n\t\tlet filePath = _path(`app.asar/${index_html_file}`);\n\t\tlet contents = readFileSync(filePath, \"utf8\");\n\n\t\tconsole.log(`Processing ${index_html_file}...`);\n\t\tcontents = contents.replace(\n\t\t\t/<title>Crawless<\\/title>/,\n\t\t\t`<title>(clapp) Crawless<\\/title>\\n\n    <script src=\"${cx_js_file}\"></script>`\n\t\t);\n\t\t// contents = contents.replace(/script-src/, \"script-src blob: 'unsafe-eval'\")\n\t\twriteFileSync(filePath, contents);\n\n\t\trmSync(_path(\"app.asar.old\"), { recursive: true, force: true });\n\n\t\tconsole.log(\"Done\", filePath);\n\t});\n\tfunction _path(to) {\n\t\treturn appDir.replace(/\\/+$/, \"\") + \"/\" + to.replace(/^\\/+/, \"\");\n\t}\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qBAUO;AACP,gCAAqB;AACrB,uBAAiB;AAEjB,IAAI,kBAAkB;AACtB,IAAI,aAAa;AAEjB,QAAQ,IAAI,OAAO,KAAK;AAExB,OAAO,UAAU,SAAS,IAAI,SAAS;AACtC,QAAM,SAAS,iBAAAA,QAAK,QAAQ,SAAS,oBAAoB;AAEzD,MAAI,KAAC,2BAAW,MAAM,GAAG;AACxB,YAAQ,IAAI,+BAA+B;AAC3C,YAAQ,KAAK,CAAC;AAAA,EACf;AAEA,MAAI,KAAC,2BAAW,MAAM,UAAU,CAAC,GAAG;AACnC,YAAQ,IAAI,4CAA6C;AACzD,YAAQ,KAAK,CAAC;AAAA,EACf;AAGA,MAAI,KAAC,2BAAW,MAAM,cAAc,CAAC,GAAG;AACvC,YAAQ,IAAI,oDAAoD;AAChE,mCAAW,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC;AAAA,EAEpD;AAEA,UAAI,2BAAW,MAAM,UAAU,CAAC,GAAG;AAClC,YAAQ,IAAI,uCAAuC;AACnD,YAAI,2BAAW,MAAM,cAAc,CAAC,GAAG;AACtC,iCAAO,MAAM,cAAc,GAAG,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAAA,IAC/D;AACA,mCAAW,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC;AAAA,EACpD;AAGA,sCAAK,gBAAgB,MAAM,cAAc,CAAC,IAAI,MAAM,UAAU,CAAC,IAAI,MAAM;AACxE,QAAI,WAAW,MAAM,YAAY,eAAe,EAAE;AAClD,QAAI,eAAW,6BAAa,UAAU,MAAM;AAE5C,YAAQ,IAAI,cAAc,eAAe,KAAK;AAC9C,eAAW,SAAS;AAAA,MACnB;AAAA,MACA;AAAA;AAAA,mBACgB,UAAU;AAAA,IAC3B;AAEA,sCAAc,UAAU,QAAQ;AAEhC,+BAAO,MAAM,cAAc,GAAG,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAE9D,YAAQ,IAAI,QAAQ,QAAQ;AAAA,EAC7B,CAAC;AACD,WAAS,MAAM,IAAI;AAClB,WAAO,OAAO,QAAQ,QAAQ,EAAE,IAAI,MAAM,GAAG,QAAQ,QAAQ,EAAE;AAAA,EAChE;AACD;",
  "names": ["path"]
}
